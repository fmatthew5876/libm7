#pragma once
#include_next <iterator>

#if __cplusplus <= 201402L
namespace std {

template <typename C>
constexpr auto size(const C& c) noexcept -> decltype(c.data()) {
	return c.size();
}

template <typename T, size_t N>
constexpr size_t size(const T (&a)[N]) noexcept {
	return N;
}

template <typename C>
constexpr auto data(C& c) noexcept -> decltype(c.data()) {
	return c.data();
}

template <typename C>
constexpr auto data(const C& c) noexcept -> decltype(c.data()) {
	return c.data();
}

template <typename T, size_t N>
constexpr T* data(T (&a)[N]) noexcept {
	return a;
}

template <typename E>
constexpr const E* data(std::initializer_list<E> il) noexcept {
	return &(*(il.begin()));
}

}  // namespace std
#endif
